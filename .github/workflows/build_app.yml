name: Build App
on:
  push:
    tags: ['v*']
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      os:
        description: 'Installer to build'
        required: true
        default: windows
        type: choice
        options:
          - windows
          - macos
          - linux
jobs:
  build:
    runs-on: ${{ matrix.runner }}
    env:
      JULIA_NUM_THREADS: auto
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos
            runner: macos-13
            arch: x64
            identifier: macos-x64
          - os: macos
            runner: macos-latest
            arch: arm64
            identifier: macos-arm64
          - os: windows
            runner: windows-latest
            arch: x64
            identifier: windows-x64
          - os: linux
            runner: ubuntu-latest
            arch: x64
            identifier: linux-x64
    steps:
      # Skip if this matrix OS isnâ€™t the one selected via workflow_dispatch
      - name: Check target
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.os != matrix.os
        run: |
          echo "Skipping ${{ matrix.os }} build"
          exit 1
      - uses: actions/checkout@v4
      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'

      - name: Determine tag version
        id: get_version
        shell: bash
        run: |
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "VERSION=0.0.0" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Install the Apple certificate and provisioning profile
        if: matrix.os == 'macos'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERT_P12 }}
          P12_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          INSTALLER_CERT_BASE64: ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          INSTALLER_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$INSTALLER_CERT_BASE64" | base64 --decode -o $INSTALLER_CERT_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$INSTALLER_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # login keychain so signing tools can locate the certificate
          security list-keychains -d user -s $KEYCHAIN_PATH login.keychain

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: apple-actions/import-codesign-certs@v2
        if: matrix.os == 'macos'
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain: signing_temp

      - uses: apple-actions/import-codesign-certs@v2
        if: matrix.os == 'macos'
        with:
          p12-file-base64: ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain: signing_temp
          create-keychain: false

      - name: Install dependencies
        run: |
          julia --project=. -e 'using Pkg; Pkg.add("PackageCompiler"); Pkg.instantiate()'

      - name: Download precompile data
        shell: bash
        run: |
          exit 0
          mkdir -p temp/zenodo
          cd temp/zenodo
          curl -LJO https://zenodo.org/record/16289168/files/yeast.poin.zip?download=1
          unzip yeast.poin.zip
          curl -L https://zenodo.org/record/16289168/files/20241211_bkc_25-0856_Goldfarb_Wamsley_Yeast_Alternating-v2_3min_Rep1.arrow?download=1 -o yeast_1.arrow
          curl -L https://zenodo.org/record/16289168/files/20241211_bkc_25-0856_Goldfarb_Wamsley_Yeast_Alternating-v2_3min_Rep2.arrow?download=1 -o yeast_2.arrow
          cd ../../
      
          
      - name: Compile application
        if: matrix.os != 'linux'
        run: |
          julia --project=. -e '
            using PackageCompiler;
            create_app(
              ".",
              "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/",
              incremental=false,
              force=true,
              executables=[
                "SearchDIA" => "main_SearchDIA",
                "BuildSpecLib" => "main_BuildSpecLib",
                "GetSearchParams" => "main_GetSearchParams",
                "GetBuildLibParams" => "main_GetBuildLibParams",
                "GetParseSpecLibParams" => "main_GetParseSpecLibParams",
                "convertMzML" => "main_convertMzML",
                "ParseSpecLib" => "main_ParseSpecLib",
              ],
              precompile_execution_file="src/build/snoop.jl",
            );
            '

      - name: Compile application (Linux - Memory Optimized)
        if: matrix.os == 'linux'
        run: |
          julia --project=. -e '
            using PackageCompiler;
            
            # Create the final directory structure
            mkpath("build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/bin")
            mkpath("build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib")
            mkpath("build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/share")
            
            # Build executables one at a time to reduce memory usage
            executables = [
            #  "SearchDIA" => "main_SearchDIA",
            #  "BuildSpecLib" => "main_BuildSpecLib",
              "GetSearchParams" => "main_GetSearchParams",
            #  "GetBuildLibParams" => "main_GetBuildLibParams",
            #  "convertMzML" => "main_convertMzML",
            #  "ParseSpecLib" => "main_ParseSpecLib"
            ]
            
            # First executable creates the base structure
            first_exe, first_main = first(executables)
            create_app(".", "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/", 
              incremental=false, force=true,
              executables=[first_exe => first_main],
              cpu_target="generic");
            
            # Build remaining executables one at a time
            for (exe, main) in executables[2:end]
              println("Building $exe...")
              create_app(".", "build/temp_$exe/", 
                incremental=false, force=true,
                executables=[exe => main],
                cpu_target="generic");
              
              # Copy just the executable
              cp("build/temp_$exe/bin/$exe", 
                 "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/bin/$exe",
                 force=true)
              
              # Clean up temp directory to save space
              rm("build/temp_$exe", recursive=true)
            end
          '
      
      - name: Add wrapper scripts
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos" ] || [ "${{ matrix.os }}" = "linux" ]; then
            # Copy and make executable the shell wrapper
            cp src/build/scripts/pioneer build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/
            chmod +x build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/pioneer
          fi
          
          if [ "${{ matrix.os }}" = "windows" ]; then
            # Copy the batch wrapper
            cp src/build/scripts/pioneer.bat build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/
          fi
      
      - name: Codesign and package macOS app
        if: matrix.os == 'macos'
        env:
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
          PKG_SIGN_IDENTITY: ${{ secrets.PKG_SIGN_IDENTITY }}
        run: |
          APPNAME="Pioneer"
          DIST="build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer"
          PKGROOT="pkgroot"
          VERSION=$(grep -m1 '^version' Project.toml | awk -F'"' '{print $2}')
          rm -rf "$PKGROOT"
          mkdir -p "$PKGROOT/usr/local/$APPNAME"
          cp -R "$DIST"/* "$PKGROOT/usr/local/$APPNAME/"
          
          # bundle assets used at runtime
          mkdir -p "$PKGROOT/usr/local/$APPNAME/data"
          cp -R data/IsotopeSplines "$PKGROOT/usr/local/$APPNAME/data/"

          # ensure CLI wrappers set a writable depot path
          for f in "$PKGROOT/usr/local/$APPNAME/bin"/*; do
            [ -f "$f" ] || continue
            if head -n1 "$f" | grep -q "^#!"; then
              if [[ "$(uname)" == "Darwin" ]]; then
                sed -i '' '2iexport JULIA_DEPOT_PATH="${JULIA_DEPOT_PATH:-$HOME/.julia}"' "$f"
              else
                sed -i '2iexport JULIA_DEPOT_PATH="${JULIA_DEPOT_PATH:-$HOME/.julia}"' "$f"
              fi
            fi
          done
          
          # ensure files are writable so codesign can modify them
          find "$PKGROOT/usr/local/$APPNAME" -type f -exec chmod u+w {} +
          echo "Codesigning binaries"
          while IFS= read -r -d '' file; do
            if file "$file" | grep -q 'Mach-O'; then
              codesign --deep --verbose=4 --force --options runtime --timestamp \
                --entitlements src/build/osx/entitlements.plist \
                --sign "$CODESIGN_IDENTITY" "$file"
            fi
          done < <(find "$PKGROOT/usr/local/$APPNAME" -type f -print0)

          mkdir -p "$PKGROOT/usr/local/bin"
          # Create symlink in /usr/local/bin for PATH access
          ln -sf /usr/local/Pioneer/pioneer "$PKGROOT/usr/local/bin/pioneer"

          pkgbuild --root "$PKGROOT" \
            --identifier edu.washu.goldfarblab.pioneer \
            --version "$VERSION" \
            --install-location / PioneerUnsigned.pkg
          productsign --sign "$PKG_SIGN_IDENTITY" \
            PioneerUnsigned.pkg Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg
          rm PioneerUnsigned.pkg


      - name: Notarize macOS package
        if: matrix.os == 'macos'
        env:
          AC_USERNAME: ${{ secrets.NOTARIZE_APPLE_ID }}
          AC_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          xcrun notarytool store-credentials notary-profile \
            --apple-id "$AC_USERNAME" \
            --team-id "$TEAM_ID" \
            --password "$AC_PASSWORD"
          result=$(xcrun notarytool submit Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg \
            --keychain-profile notary-profile --wait --output-format json)
          echo "$result"
          status=$(echo "$result" | grep -o '"status" *: *"[^" ]*"' | head -n1 | sed 's/.*"status" *: *"\([^"]*\)"/\1/')
          subid=$(echo "$result" | grep -o '"id" *: *"[^" ]*"' | head -n1 | sed 's/.*"id" *: *"\([^"]*\)"/\1/')
          if [ "$status" != "Accepted" ]; then
            echo "Notarization failed with status $status"
            xcrun notarytool log "$subid" --keychain-profile notary-profile
            exit 1
          fi

      - name: Staple notarization ticket
        if: matrix.os == 'macos'
        run: |
          xcrun stapler staple Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg
      
      
      - name: Package Windows MSI
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          $pioneerRoot = "build\Pioneer_${{ matrix.identifier }}\Applications\Pioneer"
          
          # Copy any additional resources needed
          if (Test-Path "data\IsotopeSplines") {
            $dataDir = "$pioneerRoot\data"
            New-Item -ItemType Directory -Force -Path $dataDir
            Copy-Item -Recurse "data\IsotopeSplines" "$dataDir\"
          }

          # Include license for installer
          Copy-Item "src\build\windows\LICENSE.rtf" "$pioneerRoot\LICENSE.rtf"
          
          # Remove problematic artifacts with long paths before packaging
          $artifactDir = "$pioneerRoot\share\julia\artifacts"
          if (Test-Path $artifactDir) {
            # Remove Qt-related artifacts that have very long paths
            Get-ChildItem -Path $artifactDir -Recurse -Directory |
              Where-Object { 
                $_.FullName -like "*QtQuick*" -or 
                $_.FullName -like "*Qt6*" -or 
                $_.Name -eq "include" -or
                $_.Name -eq "test" -or
                $_.Name -eq ".qt" -or
                $_.FullName.Length -gt 200
              } |
              ForEach-Object { 
                Write-Host "Removing long path: $($_.FullName)"
                Remove-Item $_.FullName -Recurse -Force -ErrorAction SilentlyContinue 
              }
          }
          
          # Determine platform for WiX
          $platform = if ("${{ matrix.arch }}" -eq "x64") { "x64" } else { "x86" }
          
          # Generate component list for all files
          & heat.exe dir $pioneerRoot `
            -cg ProductComponents `
            -dr INSTALLFOLDER `
            -platform x64 `
            -gg `
            -scom `
            -sreg `
            -sfrag `
            -srd `
            -var var.SourceDir `
            -out components.wxs
          
          # Compile WiX sources
          & candle.exe `
            -dSourceDir="$pioneerRoot" `
            -dProductVersion="${{ steps.get_version.outputs.VERSION }}" `
            -dPlatform="$platform" `
            -arch ${{ matrix.arch }} `
            -ext WixUIExtension `
            -ext WixUtilExtension `
            src\build\windows\installer.wxs components.wxs
          
          # Link to create MSI
          & light.exe `
            -ext WixUIExtension `
            -ext WixUtilExtension `
            -cultures:en-us `
            -out "Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.msi" `
            installer.wixobj components.wixobj
      
      - name: Package Linux .deb
        if: matrix.os == 'linux'
        run: |
          mkdir -p deb/usr/local/Pioneer
          cp -r build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/* deb/usr/local/Pioneer/
          # bundle assets used at runtime
          mkdir -p deb/usr/local/Pioneer/data
          cp -r data/IsotopeSplines deb/usr/local/Pioneer/data/

          mkdir -p deb/usr/local/bin
          for f in deb/usr/local/Pioneer/bin/*; do
            [ -f "$f" ] || continue
            ln -sf ../Pioneer/bin/$(basename "$f") deb/usr/local/bin/$(basename "$f")
          done
          
          for f in deb/usr/local/Pioneer/bin/*; do
            [ -f "$f" ] || continue
            if head -n1 "$f" | grep -q "^#!"; then
              sed -i '2iexport JULIA_DEPOT_PATH="${JULIA_DEPOT_PATH:-$HOME/.julia}"' "$f"
            fi
          done

          mkdir -p deb/DEBIAN
          cat <<EOF > deb/DEBIAN/control
          Package: pioneer
          Version: 0.0.0
          Architecture: amd64
          Maintainer: you@example.com
          Description: Pioneer application
          EOF

          dpkg-deb --build deb Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.deb
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}
          path: |
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.msi
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.deb

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          files: |
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.msi
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.deb

