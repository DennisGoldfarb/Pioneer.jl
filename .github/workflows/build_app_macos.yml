name: Build App macOS
on:
  push:
    tags: ['v*']
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    env:
      JULIA_NUM_THREADS: auto
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            runner: macos-13
            identifier: macos-x64
          - arch: arm64
            runner: macos-latest
            identifier: macos-arm64
    steps:
      - uses: actions/checkout@v4
      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'

      - name: Determine tag version
        id: get_version
        shell: bash
        run: |
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "VERSION=0.0.0" >> "$GITHUB_OUTPUT"
          fi

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERT_P12 }}
          P12_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          INSTALLER_CERT_BASE64: ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          INSTALLER_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$INSTALLER_CERT_BASE64" | base64 --decode -o $INSTALLER_CERT_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERT_PATH -P "$INSTALLER_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security list-keychains -d user -s $KEYCHAIN_PATH login.keychain

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain: signing_temp

      - uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_INSTALLER_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain-password: ${{ secrets.MACOS_CERT_PASSWORD }}
          keychain: signing_temp
          create-keychain: false

      - name: Install dependencies
        run: |
          julia --project=. -e 'using Pkg; Pkg.add("PackageCompiler"); Pkg.instantiate()'

      - name: Download precompile data
        shell: bash
        run: |
          mkdir -p temp/zenodo
          cd temp/zenodo
          curl -LJO https://zenodo.org/record/16289168/files/yeast.poin.zip?download=1
          unzip yeast.poin.zip
          curl -L https://zenodo.org/record/16289168/files/20241211_bkc_25-0856_Goldfarb_Wamsley_Yeast_Alternating-v2_3min_Rep1.arrow?download=1 -o yeast_1.arrow
          curl -L https://zenodo.org/record/16289168/files/20241211_bkc_25-0856_Goldfarb_Wamsley_Yeast_Alternating-v2_3min_Rep2.arrow?download=1 -o yeast_2.arrow
          cd ../../

      - name: Compile application
        run: |
          julia --project=. -e '
            using PackageCompiler;
            create_app(
              ".",
              "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/",
              incremental=false,
              force=true,
              executables=[
                "GetSearchParams" => "main_GetSearchParams",
                "GetBuildLibParams" => "main_GetBuildLibParams",
                "GetParseSpecLibParams" => "main_GetParseSpecLibParams",
                "ParseSpecLib" => "main_ParseSpecLib",
                "BuildSpecLib" => "main_BuildSpecLib",
                "SearchDIA" => "main_SearchDIA",
                "convertMzML" => "main_convertMzML"
              ],
              precompile_execution_file="src/build/snoop.jl",
            );
          '
      
      - name: Download PioneerConverter
        shell: bash
        run: |
          mkdir -p converter
          if [ "${{ matrix.identifier }}" = "macos-x64" ]; then
            PATTERN="osx-x64"
          else
            PATTERN="osx-arm64"
          fi
          echo "Using PATTERN=$PATTERN"
          curl -s https://api.github.com/repos/nwamsley1/PioneerConverter/releases/latest
          ASSET=$(curl https://api.github.com/repos/nwamsley1/PioneerConverter/releases/latest |
            grep -o "PioneerConverter-${PATTERN}-[^\"]*\.zip" | head -n 1)
          echo "Resolved ASSET=$ASSET"
          curl -L "https://github.com/nwamsley1/PioneerConverter/releases/latest/download/$ASSET" -o converter.zip
          unzip -q converter.zip -d converter
          echo "Contents of converter after unzip:"
          find converter -maxdepth 3 -print
          echo "Listing of converter/*/bin:"
          ls converter/*/bin || true
          cp -r "converter/PioneerConverter-${PATTERN}/bin/"* "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/bin/"
          mkdir -p "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib"
          cp -r "converter/PioneerConverter-${PATTERN}/lib/"* "build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/lib/"

      - name: Add wrapper scripts
        shell: bash
        run: |
          cp src/build/CLI/pioneer build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/
          chmod +x build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer/pioneer

      - name: Codesign and package macOS app
        env:
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
          PKG_SIGN_IDENTITY: ${{ secrets.PKG_SIGN_IDENTITY }}
        run: |
          APPNAME="Pioneer"
          DIST="build/Pioneer_${{ matrix.identifier }}/Applications/Pioneer"
          PKGROOT="pkgroot"
          VERSION=${{ steps.get_version.outputs.VERSION }}
          rm -rf "$PKGROOT"
          mkdir -p "$PKGROOT/usr/local/$APPNAME"
          cp -R "$DIST"/* "$PKGROOT/usr/local/$APPNAME/"

          mkdir -p "$PKGROOT/usr/local/$APPNAME/data"
          cp -R assets/* "$PKGROOT/usr/local/$APPNAME/data/"

          chmod -R a+w "$PKGROOT/usr/local/$APPNAME/share/julia"

          find "$PKGROOT/usr/local/$APPNAME" -type f -exec chmod u+w {} +
          echo "Codesigning binaries"
          while IFS= read -r -d '' file; do
            if file "$file" | grep -q 'Mach-O'; then
              codesign --deep --verbose=4 --force --options runtime --timestamp \
                --entitlements src/build/osx/entitlements.plist \
                --sign "$CODESIGN_IDENTITY" "$file"
            fi
          done < <(find "$PKGROOT/usr/local/$APPNAME" -type f -print0)

          mkdir -p "$PKGROOT/usr/local/bin"
          ln -sf /usr/local/Pioneer/pioneer "$PKGROOT/usr/local/bin/pioneer"

          info=src/build/package_info.json
          IDENTIFIER=$(jq -r '.identifier' "$info")

          pkgbuild --root "$PKGROOT" \
            --identifier "$IDENTIFIER" \
            --version "$VERSION" \
            --install-location / PioneerUnsigned.pkg
          productsign --sign "$PKG_SIGN_IDENTITY" \
            PioneerUnsigned.pkg Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg
          rm PioneerUnsigned.pkg

      - name: Notarize macOS package
        env:
          AC_USERNAME: ${{ secrets.NOTARIZE_APPLE_ID }}
          AC_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
          TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}
        run: |
          xcrun notarytool store-credentials notary-profile \
            --apple-id "$AC_USERNAME" \
            --team-id "$TEAM_ID" \
            --password "$AC_PASSWORD"
          result=$(xcrun notarytool submit Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg \
            --keychain-profile notary-profile --wait --output-format json)
          echo "$result"
          status=$(echo "$result" | grep -o '"status" *: *"[^" ]*"' | head -n1 | sed 's/.*"status" *: *"\([^"]*\)"/\1/')
          subid=$(echo "$result" | grep -o '"id" *: *"[^" ]*"' | head -n1 | sed 's/.*"id" *: *"\([^"]*\)"/\1/')
          if [ "$status" != "Accepted" ]; then
            echo "Notarization failed with status $status"
            xcrun notarytool log "$subid" --keychain-profile notary-profile
            exit 1
          fi

      - name: Staple notarization ticket
        run: |
          xcrun stapler staple Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg

      - name: Package zipped binaries
        run: |
          cd build/Pioneer_${{ matrix.identifier }}/Applications
          zip -r ../../../Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.zip Pioneer

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Pioneer-${{ matrix.identifier }}
          path: |
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.zip

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          files: |
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.pkg
            Pioneer-${{ steps.get_version.outputs.VERSION }}-${{ matrix.identifier }}.zip
