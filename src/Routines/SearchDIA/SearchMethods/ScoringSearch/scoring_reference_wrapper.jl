"""
    scoring_reference_wrapper.jl

Extension functions for ScoringSearch that create and manage file references.
This module provides functions to wrap existing ScoringSearch operations
and store their results as references in the SearchContext.
"""

using DataFrames
using Arrow

"""
    create_scoring_references(
        passing_psms_paths::Dict{String, String},
        psm_to_pg_path::Dict{String, String}
    ) -> Vector{ScoringSearchResultRefs}

Create ScoringSearchResultRefs from the file paths generated by ScoringSearch.
"""
function create_scoring_references(
    passing_psms_paths::Dict{String, String},
    psm_to_pg_path::Dict{String, String}
)
    refs = ScoringSearchResultRefs[]
    
    for (ms_file_idx, psm_path) in passing_psms_paths
        if !isfile(psm_path)
            continue
        end
        
        # Get corresponding protein group path
        pg_path = get(psm_to_pg_path, psm_path, nothing)
        if isnothing(pg_path) || !isfile(pg_path)
            continue
        end
        
        # Create references
        psm_ref = PSMFileReference(psm_path, ms_file_idx, "passing_psms")
        pg_ref = ProteinGroupFileReference(pg_path, ms_file_idx, "protein_groups")
        
        push!(refs, ScoringSearchResultRefs(psm_ref, pg_ref))
    end
    
    return refs
end

"""
    store_scoring_references!(
        search_context::SearchContext,
        passing_psms_paths::Dict{String, String},
        psm_to_pg_path::Dict{String, String}
    )

Create and store ScoringSearch file references in the SearchContext.
This should be called after protein inference is complete.
"""
function store_scoring_references!(
    search_context::SearchContext,
    passing_psms_paths::Dict{String, String},
    psm_to_pg_path::Dict{String, String}
)
    # Create references
    refs = create_scoring_references(passing_psms_paths, psm_to_pg_path)
    
    # Store in context
    if !isempty(refs)
        store_results!(search_context, "scoring_search", refs)
    end
    
    return refs
end

"""
    get_scoring_references(search_context::SearchContext) -> Vector{ScoringSearchResultRefs}

Retrieve stored ScoringSearch references from the SearchContext.
"""
function get_scoring_references(search_context::SearchContext)
    return get_results(search_context, "scoring_search", Vector{ScoringSearchResultRefs})
end

"""
    process_scoring_references(
        search_context::SearchContext,
        operation::Function
    )

Apply an operation to all stored ScoringSearch results.
The operation function should accept (psms::DataFrame, pgs::DataFrame, ms_file_idx::String).
"""
function process_scoring_references(
    search_context::SearchContext,
    operation::Function
)
    refs = get_scoring_references(search_context)
    results = []
    
    for ref in refs
        # Load data through references
        psms = Arrow.Table(ref.psm_ref.file_path) |> DataFrame
        pgs = Arrow.Table(ref.pg_ref.file_path) |> DataFrame
        
        # Apply operation
        result = operation(psms, pgs, ref.psm_ref.ms_file_idx)
        push!(results, result)
    end
    
    return results
end

"""
    Integration hook for ScoringSearch summarize_results!
    
    Add this code block after protein inference (around line 283):
    
    ```julia
    # Store file references in SearchContext
    include("scoring_reference_wrapper.jl")
    store_scoring_references!(
        search_context,
        passing_psms_paths,
        psm_to_pg_path
    )
    ```
"""

# Export main functions
export create_scoring_references,
       store_scoring_references!,
       get_scoring_references,
       process_scoring_references